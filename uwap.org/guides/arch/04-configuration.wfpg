>> t Configuration - Arch Guide
>> d Guide to configure Arch Linux after installing the basics.
>> i arch-steps

Arch Guide
Prev | red >> /guides/arch/03-installing
Next | green >> /guides/arch/05-boot

04. Initial configuration | green

How to create and edit text files
We previously installed the text editor <code>nano</code>. To start nano with a given file name (the file you want to create or edit) like <code>/some/file</code>, run:<br/><code>nano /some/file</code>
Once again, the left side of the flashing rectangle is your cursor. Moving it over the top/bottom scrolls up/down one line. Using the page up/down keys on your keyboard scrolls up/down one screen height worth of lines.
After you're done editing or entering text, press <code>Ctrl+X</code> to exit, then <code>Y</code> to save and press enter to confirm the file name we already entered while starting <code>nano</code>.
<br/>
There's a faster way to write some text to a file (without <code>nano</code>):
To overwrite <code>/some/file</code> with text <code>[text]</code>, run:<br/><code>echo [text] &gt; /some/file</code>
If your text contains spaces, you need to put quotes around it like this:<br/><code>echo "Hello world!" &gt; /some/file</code>
The same applies to file names containing spaces:<br/><code>echo [text] &gt; "/etc/some file"</code>
In case you want to write the text as a new line at the back of the existing file contents instead of replacing them, use <code>&gt;&gt;</code> instead of <code>&gt;</code>:<br/><code>echo "new line" &gt;&gt; /some/file</code>
<br/>
To output a file's contents, use <code>cat</code>. For <code>/some/file</code>, you'd need to run:<br/><code>cat /some/file</code>

Entering the environment
We will now temporarily change our root directory to <code>/mnt</code>, so we'll essentially run commands on our Arch installation.
You can do that by running:<br/><code>arch-chroot /mnt /bin/bash</code>

Installing sudo
<code>sudo</code> can be used to run things as the user <code>root</code> without logging in as such (because you shouldn't do everything as the <code>root</code> user), of course only if the current account is permitted to use <code>sudo</code>, we'll set that up later.
To install sudo, run:<br/><code>pacman -S sudo</code>

NTFS support
If you'd like to be able to use drives formatted as NTFS (such as drives with Windows installations and most large drives formatted using Windows or for Windows usage), you need to add support for it to your Arch installation.
You can do that by installing <code>ntfs-3g</code> like so:<br/><code>pacman -S ntfs-3g</code>

Installing NetworkManager
We will use <code>NetworkManager</code> to handle and configure our network connection. If you want, you can also use something like <code>dhcpcd</code> instead.
You can install <code>NetworkManager</code> by running:<br/><code>pacman -S networkmanager</code>
We also need to enable the corresponding service so it's loaded when we boot our system:<br/><code>systemctl enable NetworkManager</code>

Setting a root password
In order to log in after booting, we need to set a password for the user <code>root</code> by running:<br/><code>passwd</code>
You will have to enter the same password twice and you won't see any characters you're typing (or that you're typing anything at all), just press enter after each password entry.

Setting the time
First, we'll need to set the correct time zone. These are usually named after big cities near you (such as Berlin in Europe for Germany's time zone or names such as "Central Time".
If you're not sure, simply search "[your city] time zone" online. If you find something like "Central European Time" (not present), look up a datasheet for time zones (like <a href="https://gist.github.com/alejzeis/ad5827eb14b5c22109ba652a1a267af5" target="_blank" rel="nofollow">here</a>) and search for the name you found.
To list possible groups of time zones (such as "Europe" or "US"), run:<br/><code>ls -d /usr/share/zoneinfo/*/</code>
To list time zones in a group (e.g. Europe), run:<br/><code>ls /usr/share/zoneinfo/Europe</code>
Once you've found the correct time zone file (e.g. Europe/Berlin), set it as the one to use by running:<br/><code>ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime</code>
After that's done, sync your hardware clock (RTC) by running:<br/><code>hwclock --systohc</code>
If you are dual-booting with Windows, you should set your hardware clock to use the local time instead of UTC (because Windows uses the local time and can't really deal with an RTC set to UTC):<br/><code>timedatectl set-local-rtc 1</code>

Setting the locale
Open the file <code>/etc/locale.gen</code> in <code>nano</code> (like described at the top of the page). If you want your locale to be English for the US, look for <code>en_US</code>.
To search in <code>nano</code>, press <code>Ctrl+W</code>, enter whatever you're looking for (like <code>en_US</code>) and press enter. It will relocate the cursor to the first/next instance of the search term (as long as it found it).
Once you've found your desired locale, you need to uncomment the lines that start with that code by removing the <code>#</code> in the beginning of those lines.
For example, if you want to use <code>en_US</code> with character encodings <code>UTF-8</code> and <code>ISO-8859-1</code>, make it look like this:<br/><code>#...</code><br/><code>#en_SG ISO-8859-1</code><br/><code>en_US.UTF-8 UTF-8</code><br/><code>en_US ISO-8859-1</code><br/><code>#en_ZA.UTF-8 UTF-8</code><br/><code>#...</code>
Save and exit <code>nano</code>.
Now, apply the change by running:<br/><code>locale-gen</code>

Setting the language
Set your system language to use one of the locales you uncommented (e.g. <code>en_US.UTF-8</code>, I recommend UTF-8) by writing something like <code>LANG=en_US.UTF-8</code> to <code>/etc/locale.conf</code>.
You can do this in one command (like described above):<br/><code>echo "LANG=en_US.UTF-8" > /etc/locale.conf</code>

Setting the keyboard layout
We need to set the keyboard layout for a second time, you can use the same keyboard code as at the start of the guide.
Set it by writing something like <code>KEYMAP=de-latin1</code> to <code>/etc/vconsole.conf</code>.

Setting the hostname
Your hostname is the name other computers on your network can see.
You can set it by writing it (nothing else) to <code>/etc/hostname</code>.

Adding localhost to /etc/hosts
To be able to reach your own computer as <code>localhost</code>, add the following two lines to <code>/etc/hosts</code> (replace [TAB] with a press of the tab key):<br/><code>127.0.0.1[TAB]localhost[TAB][YOUR HOSTNAME]</code><br/><code>::1[TAB]localhost[YOUR HOSTNAME]</code>

Using disk encryption?
If you're using disk encryption, you need to do one more thing - otherwise skip this step.
Edit the <code>HOOKS=...</code> line in <code>/etc/mkinitcpio.conf</code> in a way so that <code>encrypt</code>, <code>keyboard</code> and <code>keymap</code> are in front of <code>filesystems</code>.
The line should look more or less like this:<br/><code>HOOKS=(base udev autodetect modconf kms keyboard keymap consolefont block encrypt filesystems fsck)</code>
Once that's done, run (if you're using a kernel other than <code>linux</code>, replace it with your kernel's name):<br/><code>mkinitcpio -p linux</code>
[Troubleshooting] If the first attempt of entering your disk password is always wrong (later on) because it's using the wrong keyboard layout, edit the <code>HOOKS=...</code> line to either move <code>keymap</code> in front of <code>autodetect</code> or remove <code>autodetect</code> entirely, then run the <code>mkinitcpio</code> command again.

Exiting the environment
To leave the <code>/mnt</code> environment again, run:<br/><code>exit</code>
Note that you don't need to do this if you're planning to use <code>GRUB</code> as a boot manager in the next step since that step starts by entering the <code>/mnt</code> environment again.